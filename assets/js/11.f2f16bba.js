(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{208:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-进阶"}},[t._v("#")]),t._v(" Git 进阶")]),t._v(" "),a("blockquote",[a("p",[t._v("一个学习 Git 的互动型网站：https://learngitbranching.js.org/?demo=&locale=zh_CN")])]),t._v(" "),a("h2",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("git commit -a")]),t._v("： "),a("code",[t._v("-a, --all")]),t._v(" 会 commit all changed files，但是不会添加新添加的文件（untracked files）")]),t._v(" "),a("li",[a("code",[t._v("git commit --amend")]),t._v("：amend previous commit，即将本次提交追加到上次提交上，用于更改上次提交的内容或者 message")])]),t._v(" "),a("h2",{attrs:{id:"git-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash"}},[t._v("#")]),t._v(" git stash")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("把工作区内容缓存到一个栈里，之后用 "),a("code",[t._v("git stash pop")]),t._v("取出。在未提交工作区内容，但是想切到其他分支时非常有用。")])]),t._v(" "),a("li",[a("p",[t._v("不建议同一时间段在不同分支都使用 "),a("code",[t._v("git stash")]),t._v("，涉及到多个分支的情形还是先  commit 较好，不push到远程，下次 commit 时可用 "),a("code",[t._v("--amend")]),t._v(" 合到上次提交中。")])])]),t._v(" "),a("h2",{attrs:{id:"git-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase"}},[t._v("#")]),t._v(" git rebase")]),t._v(" "),a("p",[a("code",[t._v("git rebase")]),t._v(" 一般解释为"),a("strong",[t._v("变基")]),t._v("，rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。rebase 的优势就是可以创造更线性的提交历史。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("步骤分析")]),t._v("：在 dev 分支（dev 分支是在 master 分支拉出的）执行 "),a("code",[t._v("git rebase master")]),t._v(" ：首先找到 dev 分支和 master 分支的最近的共同祖先，然后将 dev 分支上共同祖先之后的提交“复制”出来，放置在 master 提交之后，最后将 dev 分支指向 master 分支的最后一个提交。这样由原来的两个分岔的分支，变成重叠的分支，看起来 dev 是从最新的 master 上拉出的分支。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("使用场景")]),t._v("：从 dev 拉出分支 feature-a。那么当 dev 要合并 feature-a 的内容时，使用 "),a("code",[t._v("git merge feature-a")]),t._v("；反过来当 feature-a 要更新 dev 的内容时，使用 "),a("code",[t._v("git rebase dev")]),t._v('。使用时主要看两个分支的**"主副"关系**。')])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git rebase --continue")]),t._v("：解决冲突后完成本次 rebase")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git rebase --abort")]),t._v("：放弃本次 rebase 操作")])])]),t._v(" "),a("h2",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),a("h4",{attrs:{id:"三种参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种参数"}},[t._v("#")]),t._v(" 三种参数")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("--hard")]),t._v("：暂存区、工作区和 HEAD 指向的目录树内容相同（相当于还原，"),a("strong",[t._v("删除了工作区文件")]),t._v("，不想要代码了）。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("--soft")]),t._v("：只更改 HEAD 的指向，暂存区和工作区不变。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("--mixed")]),t._v("（默认为"),a("code",[t._v("--mixed")]),t._v("）：更改HEAD 的指向及重置暂存区，但是不改变工作区。")])])]),t._v(" "),a("h4",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("git reset HEAD {filename}")]),t._v(":  取消暂存文件，恢复到已修改未暂存状态。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git reset HEAD^")]),t._v(":  表示回退到上一个提交。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git reset HEAD~{n}")]),t._v(":  表示回退到"),a("code",[t._v("n")]),t._v("个提交之前。它也可以用来合并提交。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git reset {version}")]),t._v(":  后面带版本号，直接回退到指定版本。")])])]),t._v(" "),a("h4",{attrs:{id:"撤销-git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销-git-reset"}},[t._v("#")]),t._v(" 撤销 git reset")]),t._v(" "),a("p",[a("code",[t._v("git reflog")]),t._v(" 查看一下历史HEAD的移动，然后"),a("code",[t._v("git reset --hard HEAD@{n}")]),t._v("即可！")]),t._v(" "),a("h2",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),a("p",[a("code",[t._v("git revert")]),t._v(" 是用一次新的 commit 来回滚之前的 commit，不会丢失之前的代码。"),a("code",[t._v("git revert HEAD")]),t._v(" 表示回滚到上次提交，即新增一个 commit ，与上个 commit 抵消。")]),t._v(" "),a("p",[a("code",[t._v("tips")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git revert")]),t._v(" 后多出一条commit ，有回撤操作")]),t._v(" "),a("li",[a("code",[t._v("git reset")]),t._v(" 直接把之前 commit 删掉，非 "),a("code",[t._v("git reset --hard")]),t._v("  的操作是不会删掉修改代码，如果远程已经有之前代码，需要强推 "),a("code",[t._v("git push -f")])]),t._v(" "),a("li",[a("code",[t._v("git revert --abort")]),t._v("：放弃本次 revert 操作")]),t._v(" "),a("li",[t._v("revert 遇到多个祖先时需要指定parent："),a("a",{attrs:{href:"https://juejin.im/post/5acf4db8f265da239148822d",target:"_blank",rel:"noopener noreferrer"}},[t._v("当你决定去 revert 一个merge commit"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"git-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-merge"}},[t._v("#")]),t._v(" git merge")]),t._v(" "),a("p",[a("code",[t._v("git merge --no-ff")]),t._v("：--no-ff 指的是强行关闭fast-forward方式。--no-ff (no fast foward)，使得每一次的合并都创建一个新的commit记录，即要求git merge即使在fast forward条件下也要产生一个新的merge commit，用来避免丢失信息。这对于以后代码进行分析特别有用。")]),t._v(" "),a("h4",{attrs:{id:"撤销-git-merging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#撤销-git-merging"}},[t._v("#")]),t._v(" 撤销 git merging")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("方法一："),a("code",[t._v("git reset --hard HEAD~")]),t._v(" 回到合并之前的提交或者先通过 "),a("code",[t._v("git reflog")]),t._v(" 确定 merge 之前所在的 commit，然后使用 "),a("code",[t._v("git reset --hard <commit>")]),t._v(" 重置头指针。")])]),t._v(" "),a("li",[a("p",[t._v("方法二："),a("code",[t._v("git merge --abort")])])])]),t._v(" "),a("h2",{attrs:{id:"git-修改上次提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-修改上次提交"}},[t._v("#")]),t._v(" git 修改上次提交")]),t._v(" "),a("h4",{attrs:{id:"方法一：用-commit-amend"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法一：用-commit-amend"}},[t._v("#")]),t._v(" 方法一：用 commit -amend")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果只是修改commit message不用输入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v(" --amend\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 若还没有推送到远端，不用输入 -f")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"方法二：用-git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法二：用-git-reset"}},[t._v("#")]),t._v(" 方法二：用 git reset")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset HEAD^\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 如果只是修改commit message不用输入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commit message"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 若还没有推送到远端，不用输入 -f")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("code",[t._v("tips")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("如果提交已经推送到远端且远程分支上没有新的提交，"),a("code",[t._v("git push")]),t._v(" 时可以加上 -f 强制覆盖远程仓库，否则先"),a("code",[t._v("git pull")]),t._v(" 下来再 push")])]),t._v(" "),a("h2",{attrs:{id:"开发新功能步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发新功能步骤"}},[t._v("#")]),t._v(" 开发新功能步骤")]),t._v(" "),a("ol",[a("li",[t._v("从开发分支拉一个功能分支")]),t._v(" "),a("li",[t._v("功能分支开发和测试")]),t._v(" "),a("li",[t._v("功能分支 rebase 开发分支")]),t._v(" "),a("li",[t._v("功能分支合并到开发分支")])]),t._v(" "),a("p",[a("code",[t._v("tips")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("一次提交做一件事，写清楚 comment")]),t._v(" "),a("li",[t._v("每次 pull 远程分支时使用 "),a("code",[t._v("git pull --rebase")])]),t._v(" "),a("li",[t._v("分支从哪拉出来，最后合到哪回去")]),t._v(" "),a("li",[t._v("合并之前先 rebase")])]),t._v(" "),a("h2",{attrs:{id:"fix-bug-步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fix-bug-步骤"}},[t._v("#")]),t._v(" fix bug 步骤")]),t._v(" "),a("h4",{attrs:{id:"测试线bug的修复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试线bug的修复"}},[t._v("#")]),t._v(" 测试线bug的修复")]),t._v(" "),a("p",[t._v("和开发步骤类似")]),t._v(" "),a("h4",{attrs:{id:"线上bug的修复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线上bug的修复"}},[t._v("#")]),t._v(" 线上bug的修复")]),t._v(" "),a("ol",[a("li",[t._v("从master拉一个fix分支（为什么是master）")]),t._v(" "),a("li",[t._v("测试完后 rebase master")]),t._v(" "),a("li",[t._v("合并回master")])]),t._v(" "),a("h2",{attrs:{id:"其它"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),a("h4",{attrs:{id:"分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git push origin -d [branch-name]")]),t._v("：删除远程分支")]),t._v(" "),a("li",[a("code",[t._v("git push origin :branch-name")]),t._v("：删除远程分支")])]),t._v(" "),a("h4",{attrs:{id:"tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),a("p",[t._v("推送 tag 到远程仓库：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git push origin tag-name")])]),t._v(" "),a("li",[a("code",[t._v("git push origin refs/tag/tag-name")])])]),t._v(" "),a("p",[t._v("删除远程仓库 tag")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("git push origin -d tag-name")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("git push origin :refs/tags/tag-name")]),t._v("：删除远程tag")])])]),t._v(" "),a("h4",{attrs:{id:"log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[t._v("#")]),t._v(" log")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git log --pretty=oneline")]),t._v("：简洁模式查看 log")]),t._v(" "),a("li",[a("code",[t._v("git reflog")]),t._v("：查看操作记录")])]),t._v(" "),a("h2",{attrs:{id:"相关文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关文档"}},[t._v("#")]),t._v(" 相关文档")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/599e14875188251240632702",target:"_blank",rel:"noopener noreferrer"}},[t._v("一篇文章，教你学会Git"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5b0e5adc6fb9a009d82e4f20",target:"_blank",rel:"noopener noreferrer"}},[t._v("git reset 和 git revert"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d3685146fb9a07ed064f11b",target:"_blank",rel:"noopener noreferrer"}},[t._v("git pull --rebase的正确使用"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a54386af265da3e3b7a6317#heading-19",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何优雅地使用 Git"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5b5ab8136fb9a04f834659ba",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 如何回滚一次错误的合并"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);